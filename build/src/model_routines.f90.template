module <MODEL>_routines
! Routines specific to VIC model
  use nrtype 
  use public_var
  use strings
  use data_type 

  implicit none

  private

  public :: adj_soil_param_<MODEL> 
  public :: adj_vege_param_<MODEL> 
  public :: replace_soil_param_<MODEL> 
  public :: <MODEL>_hru_id
  public :: <MODEL>_soil_layer
  public :: read_<MODEL>_sim
  public :: read_soil_param_<MODEL>
  public :: write_soil_param_<MODEL>

contains

!***************************
! write VIC soil parameters 
!***************************
subroutine write_soil_param_<MODEL>(hruid, param, ierr, message)
  implicit none
  !input variables
  integer(i4b),intent(in)            :: hruid(:)     ! hru ID
  real(dp),    intent(in)            :: param(:,:)   ! 
  ! output
  integer(i4b),intent(out)           :: ierr         ! error code
  character(*),intent(out)           :: message      ! error message
  ! local variables
  integer(i4b)                       :: iHru         ! loop index
  integer(i4b)                       :: stat

  ! initialize error control
  ierr=0; message='write_soil_param_<MODEL>/'
  <WRITING param into calibparam_name ROUTINE>
  return
end subroutine

!***************************
! Read VIC hru IDs 
!***************************
subroutine <MODEL>_hru_id(hruid, err, message)
  implicit none
  ! input 
  ! output
  integer(i4b),intent(out)                   :: hruid(:)     ! list of hru where calibration is performed 
  integer(i4b),intent(out)                   :: err          ! error code
  character(*),intent(out)                   :: message      ! error message
  ! local variables
  real(dp),dimension(TotNpar)                :: realline
  integer(i4b)                               :: ipar,iHru    ! loop index
  integer(i4b)                               :: stat

  ! initialize error control
  err=0; message='<MODEL>_hru_id/'
  <READING file containing hru id into hruid ROUTINE>
  return
end subroutine

!***************************
! Read VIC soil layer parameters 
!***************************
subroutine <MODEL>_soil_layer(hlyr, err, message)
  implicit none
  ! input 
  ! output
  real(dp),    intent(out)           :: hlyr(:,:) ! calibrating parameter list 
  integer(i4b),intent(out)           :: err             ! error code
  character(*),intent(out)           :: message         ! error message
  ! local variables
  real(dp),dimension(TotNpar)        :: realline
  integer(i4b)                       :: ipar,iHru,iLyr  ! loop index
  integer(i4b)                       :: stat

  ! initialize error control
  err=0; message='<MODEL>_soil_layer/'
  <READING a file containing into hlyr ROUTINE>
  return
end subroutine

!***************************
! Read VIC soil parameters 
!***************************
subroutine read_soil_param_<MODEL>(param, err, message)
  implicit none
  ! input 
  ! output
  real(dp),    intent(out)                   :: param(:,:)   ! calibrating parameter list 
  integer(i4b),intent(out)                   :: err          ! error code
  character(*),intent(out)                   :: message      ! error message
  ! local variables
  integer(i4b)                               :: ipar,iHru    ! loop index
  integer(i4b)                               :: stat

  ! initialize error control
  err=0; message='<MODEL>_soil_param/'
  <READING origparam into param ROUTINE>
  return
end subroutine

!***************************
! replace VIC soil parameters 
!***************************
subroutine replace_soil_param_<MODEL>(param, hModel, parMxyMz, adjParam, ierr, message)
  use globalData, only: parMaster, betaInGamma 
  use get_ixname, only: get_ixPar
  implicit none
  !input variables
  real(dp),         intent(in)   :: param(:,:)    ! original soil parameters 
  real(dp),         intent(in)   :: hModel(:,:)   ! Model layer thickness at model hrus 
  type(namedvar2),  intent(in)   :: parMxyMz(:)   ! soil model parameter at model layer x model hrus
  ! output
  real(dp),         intent(out)  :: adjParam(:,:) ! adjusted soil parameter
  integer(i4b),     intent(out)  :: ierr          ! error code
  character(*),     intent(out)  :: message       ! error message
  ! local variables
  integer(i4b)                   :: ipar,iHru     ! loop index
  integer(i4b)                   :: nSoilParModel ! number of parameters 

  ! initialize error control
  ierr=0; message='replace_soil_param_<MODEL>/'
  nSoilParModel=size(parMxyMz)
  adjParam=param
  hru: do iHru = 1,nHru
    ! replace parameter values
    do iPar=1,nSoilParModel
      associate( ix=>get_ixPar(trim(betaInGamma(iPar))) )
      select case( parMaster(ix)%pname )
        case('');  adjParam(iHru,5)     = parMxyMz(iPar)%varData(1, iHru) 
        case('');  adjParam(iHru,6)     = parMxyMz(iPar)%varData(nLyr,iHru)
        case('');  adjParam(iHru,7)     = parMxyMz(iPar)%varData(nLyr,iHru)
        case('');  adjParam(iHru,8)     = parMxyMz(iPar)%varData(nLyr,iHru)
        case('');  adjParam(iHru,9)     = parMxyMz(iPar)%varData(nLyr,iHru)
        case('');  adjParam(iHru,10:12) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,13:15) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,23)    = hModel(1,iHru)
        case('');  adjParam(iHru,24)    = hModel(2,iHru)
        case('');  adjParam(iHru,25)    = hModel(3,iHru)
        case('');  adjParam(iHru,28:30) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,34:36) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,37:39) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,41:43) = parMxyMz(iPar)%varData(:,iHru)
        case('');  adjParam(iHru,44:46) = parMxyMz(iPar)%varData(:,iHru)
      end select
      end associate
    end do
  enddo hru
  return
end subroutine

!***************************
! Adjust VIC soil parameters with multipliers 
!***************************
subroutine adj_soil_param_<MODEL>(param, multiplier, adjParam,  err, message)
!! This routine takes the adjustable parameter set "param" from namelist, reads into "origparam_name",
!! computes the new parameters, writes them into "calibparam_name" 
  use globalData, only: parSubset
  implicit none
  !input variables
  real(dp),    intent(in)    :: param(:,:)    ! original soil parameters 
  real(dp),    intent(in)    :: multiplier(:) ! mulitpliers for calibrating soil parameter 
  ! output
  real(dp),    intent(out)   :: adjParam(:,:) ! adjusted soil parameter
  integer(i4b),intent(out)   :: err           ! error code
  character(*),intent(out)   :: message       ! error message
  ! local variables
  integer(i4b)               :: iPar,iHru     ! loop index

  ! initialize error control
  err=0; message='adj_soil_param_<MODEL>/'
  adjParam=param
  do iHru = 1,nHru
    ! Modify parameter values
    do iPar=1,nParCal
      select case( parSubset(iPar)%pname )
        case(''); adjParam(iHru,5)     = multiplier( iPar )*Param(iHru,5)
        case(''); adjParam(iHru,6)     = multiplier( iPar )*Param(iHru,6)
        case(''); adjParam(iHru,7)     = multiplier( iPar )*Param(iHru,7)
        case(''); adjParam(iHru,8)     = multiplier( iPar )*Param(iHru,8)
        case(''); adjParam(iHru,9)     = multiplier( iPar )*Param(iHru,9)
        case(''); adjParam(iHru,10:12) = multiplier( iPar )*Param(iHru,10:12)
        case(''); adjParam(iHru,13:15) = multiplier( iPar )*Param(iHru,13:15)
        case(''); adjParam(iHru,23)    = multiplier( iPar )*Param(iHru,23)
        case(''); adjParam(iHru,24)    = multiplier( iPar )*Param(iHru,24)
        case(''); adjParam(iHru,25)    = multiplier( iPar )*Param(iHru,25)
        case(''); adjParam(iHru,28:30) = multiplier( iPar )*Param(iHru,28:30)
        case(''); adjParam(iHru,34:36) = multiplier( iPar )*Param(iHru,34:36)
        case(''); adjParam(iHru,37:39) = multiplier( iPar )*Param(iHru,37:39)
        case(''); adjParam(iHru,41:43) = multiplier( iPar )*Param(iHru,41:43)
        case(''); adjParam(iHru,44:46) = multiplier( iPar )*Param(iHru,44:46)
       end select
    end do
    ! Limit parameters to correct possible values without physical meaning: this applies for all configurations
    !binfilt
    if(adjParam(iHru,5) .lt. 0.001) then
      adjParam(iHru,5) = 0.001
    elseif(adjParam(iHru,5) .gt. 0.5) then
      adjParam(iHru,5) = 0.5
    endif
  enddo 
  return
end subroutine

!***************************
! Adjust VIC vege parameters with multiplier
!***************************
subroutine adj_vege_param_<MODEL>(multiplier, err, message)
  use globalData, only: parSubset
  implicit none

  ! input variables
  real(dp),             intent(in) :: multiplier(:)             ! list of calibratin parameters 
  ! output
  integer(i4b),intent(out)         :: err                       ! error code
  character(*),intent(out)         :: message                   ! error message
  ! local variables
  integer(i4b)                     :: vegClass                  ! vegetation class 
  real(dp)                         :: vegFrac                   ! fraction of vage class
  real(dp),dimension(nLyr)         :: rootDepth                 ! root zone depth
  real(dp),dimension(nLyr)         :: rootFrac                  ! root zone fraction
  real(dp),dimension(12)           :: laiMonth                  ! monthly LAI
  integer(i4b)                     :: hruID                     ! hru ID
  integer(i4b)                     :: nTile                     ! number of vege tile 
  integer(i4b)                     :: iPar,iHru,iTile,iMon,iLyr ! loop index
  character(50)                    :: rowfmt                    ! string specifying write format for real value
  integer(i4b)                     :: stat

  ! initialize error control
  err=0; message='adj_vege_param_<MODEL>/'
  !Open original and modified vege parameter files
  <READING origvege_name ROUTINE>
  <ADJUSTIN VEGE PARAM ROUTINE>
  <READING calivege_name ROUTINE>
  return
end subroutine

!***************************
! Read VIC output file
!***************************
subroutine read_<MODEL>_sim(sim, err, message)
  implicit none
  !output variables
  real(dp),              intent(out) :: sim(:,:)
  integer(i4b),          intent(out) :: err            ! error code
  character(*),          intent(out) :: message        ! error message
  !local variables
  character(len=strLen)              :: filename
  real(dp)                           :: cellfraction,basin_area
  real(dp)                           :: auxflux(5)                 ! This is only in case of water balance mode
  integer(i4b)                       :: ibasin, itime, ivar, icell ! index 
  integer(i4b)                       :: ncell
  integer(i4b)                       :: dum,c_cell

  ! initialize error control
  err=0; message='read_<MODEL>_sim/'
  !set output variable to zero
  sim = 0.0_dp
  !cell counter
  c_cell = 1
  !open a few files
  open (UNIT=53,file=trim(filelist_name),form='formatted',status='old')
  open (UNIT=54,file=trim(cellfrac_name),form='formatted',status='old')
  open (UNIT=51,file=trim(region_info),form='formatted',status='old')
  do ibasin = 1,nbasin
    read (UNIT=51,*) dum,dum,basin_area,ncell
    do icell = 1,ncell
      read (UNIT=53,*) filename
      read (UNIT=54,*) cellfraction
      filename=trim(sim_dir)//trim(filename)

      <READING filename into sim ROUTINE>

    enddo
  enddo
  close(UNIT=51)
  close(UNIT=53)
  close(UNIT=54)
  return
end subroutine

end module <MODEL>_routines
